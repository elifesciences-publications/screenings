#!/usr/bin/env python

# Copyright (C) <2015> EMBL-European Bioinformatics Institute

# This program is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

# Neither the institution name nor the name screenings can
# be used to endorse or promote products derived from this
# software without prior written permission. For written
# permission, please contact <marco@ebi.ac.uk>.

# Products derived from this software may not be called
# screenings nor may screenings appear in their names
# without prior written permission of the developers.
# You should have received a copy of the GNU General Public
# License along with this program. If not, see
# <http://www.gnu.org/licenses/>.

__author__ = "Marco Galardini"
__version__ = "0.0.1"

def get_options():
    import argparse

    # create the top-level parser
    description = "Predict the best time points for each condition"
    parser = argparse.ArgumentParser(description = description,
                                     prog = 'get_time_points')
    parser.add_argument('files', action='store',
                        help='Input files (use "-" for STDIN)')
    parser.add_argument('tpoints', action='store',
                        help='Time points file')
    parser.add_argument('idir', action='store',
                        help='Iris directory')
    parser.add_argument('iris', action='store',
                        help='Iris tag')

    parser.add_argument('--size-min', action='store',
            type=float,default=2000,
            help='Colony size minimum median [Default: 2000]')
    parser.add_argument('--color-min', action='store',
            type=float,default=4,
            help='Colony log10 color minimum median [Default: 4]')
    parser.add_argument('--color-max', action='store',
            type=float,default=1.5,
            help='Colony log10 color maximum median [Default: minimum + 1.5]')
    
    parser.add_argument('--color', action='store_true',
                        default=False,
                        help='Handle color data [Default: size]')
    
    parser.add_argument('--version', action='version',
                         version='%(prog)s '+__version__)

    return parser.parse_args()

if __name__ == "__main__":
    import screenings as sc
    import os
    import sys
    import numpy as np
    import pandas as pd
    import itertools
    import csv

    import matplotlib.pyplot as plt
    import seaborn as sns
    sns.set_style('white')

    options = get_options()
    
    plates = ('10_A', '10_B', '10_C',
              '8_A', '8_B', '8_C',
              '9_A', '9_B', '9_C')

    date = {'July':('15-07', '2015-07'),
            'Aug':('15-08', '2015-08'),
            'June':('15-06', '2015-06'),}

    cond = {}
    with open(options.tpoints, 'r') as tsvfile:
        for row in csv.DictReader(tsvfile, delimiter='\t'):
            # Skip the conditions for which there is no timepoint available
            if len({row[x] for x in plates}) == 1 and '-' in {row[x] for x in plates}:
                continue

            # Avoid repicking the same file between replica
            picked = set()

            cond[row['condition']] = set()

            for rep in plates:
                # Pick the iris directory
                if row[rep] == '-':
                    continue
                dirs = list(filter(lambda x: os.path.isdir(os.path.join(
                    options.idir, os.path.split(row[rep])[0],
                    x)) and x.startswith('JPG'),
                    os.listdir(os.path.join(options.idir, os.path.split(row[rep])[0]))))
                if len(dirs) > 1 or len(dirs) == 0:
                    continue
                iris_dir = dirs[0]
                # Is my replica available here?
                iris_files = list(filter(lambda x: x.endswith('iris'),
                    os.listdir(
                    os.path.join(options.idir, os.path.split(row[rep])[0], iris_dir,
                        options.iris))
                    ))
                iris_file1 = '%s-%s-%s-%s_%s.JPG.iris'%(row['condition'],
                        rep, date[row[rep].split('_')[0]][0],
                        row[rep].split('_')[1].split('/')[0],
                        os.path.split(row[rep])[1],)
                iris_file2 = '%s-%s-%s-%s_%s.JPG.iris'%(row['condition'],
                        rep,date[row[rep].split('_')[0]][1],
                        row[rep].split('_')[1].split('/')[0],
                        os.path.split(row[rep])[1],)
                # Lowercase match
                matches = list(filter(lambda x: x.lower() == iris_file1.lower(),
                    iris_files))
                matches += list(filter(lambda x: x.lower() == iris_file2.lower(),
                    iris_files))
                if len(matches) == 0:
                    continue
                for pick in picked:
                    matches.remove(pick)
                if len(matches) == 0:
                    continue
                pick = matches[0]
                cond[row['condition']].add(pick)

    if options.files == '-':
        files = {x.rstrip() for x in sys.stdin}
    else:
        files = {x.rstrip() for x in open(options.files)}
    singles = {'-'.join(os.path.split(x)[-1].split('.')[0].split('-')[:2]).lstrip()
               for x in files}

    fig = plt.figure(figsize=(7, 5))

    tp = {}
    for c in singles:
        tp[c] = tp.get(c, {})
        #print(c)
        filez = {x for x in files if c in x}
        filez = sorted(filez, key=lambda x: (x.split('/')[-1].split('-')[2].split('.')[0],
                                             x.split('/')[-4],
                                             x.split('/')[-1].split('_')[-1].split('.')[0],
                                             ))
        # Try to guess the best time point for each replica
        #
        for f, i in zip(filez, range(1, 3*len(filez)+1, 3)):
            m = sc.parse_iris(f)
            # Save some parameters to guess the best time point
            replica = f.split('/')[-1].split('-')[2].split('.')[0]
            date = f.split('/')[-4]
            time = f.split('/')[-1].split('_')[-1].split('.')[0]
            tp[c][replica] = tp[c].get(replica, {})
            tp[c][replica][(date, time)] = (float(sc.median(m['colony size'])),
                                        sc.mad(m['colony size'].as_matrix()),
                                        float(sc.median(np.log10(m['colony color intensity'] + 1))),
                                        sc.mad(np.log10(m['colony color intensity'].as_matrix() + 1)),
                                        m[m['colony size'] > options.size_min].shape[0] / float(m.shape[0]),
                                        m[m['circularity'] > 0.8].shape[0] / float(m.shape[0]),
                                        m[(np.log10(m['colony color intensity'] + 1) > options.color_min) & 
                                          (np.log10(m['colony color intensity'] + 1) < (options.color_min +
                                                   options.color_max))].shape[0] / float(m.shape[0]))
            if not options.color:
                if '10_' not in f:
                    continue
                if os.path.split(f)[-1] in cond.get(c, []):
                    sns.kdeplot(m['colony size'],
                                color=sns.xkcd_rgb['grey'],
                                label='%s %s %s'%(replica, date, time))
                else:
                    sns.kdeplot(m['colony size'],
                                label='%s %s %s'%(replica, date, time))
                    pass
                plt.xlim(0, 10000)
            else:
                if '10_' not in f:
                    continue
                if os.path.split(f)[-1] in cond.get(c, []):
                    sns.kdeplot(np.log10(m['colony color intensity'] + 1),
                                color=sns.xkcd_rgb['grey'],
                                label='%s %s %s'%(replica, date, time))
                else:
                    sns.kdeplot(np.log10(m['colony color intensity'] + 1),
                                label='%s %s %s'%(replica, date, time))
                plt.xlim(0, 6.5)
        sns.despine(bottom=True, left=True)
        plt.savefig('%s.png'%c)
        plt.clf()
