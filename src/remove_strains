#!/usr/bin/env python

# Copyright (C) <2015> EMBL-European Bioinformatics Institute

# This program is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

# Neither the institution name nor the name screenings can
# be used to endorse or promote products derived from this
# software without prior written permission. For written
# permission, please contact <marco@ebi.ac.uk>.

# Products derived from this software may not be called
# screenings nor may screenings appear in their names
# without prior written permission of the developers.
# You should have received a copy of the GNU General Public
# License along with this program. If not, see
# <http://www.gnu.org/licenses/>.

__author__ = "Marco Galardini"
__version__ = "0.0.1"

def get_options():
    import argparse

    # create the top-level parser
    description = "Remove strains from a matrix"
    parser = argparse.ArgumentParser(description = description,
                                     prog = 'remove_strains')
    parser.add_argument('inmatrix', action='store',
                        help='Input matrix file')
    parser.add_argument('remove', action='store',
                        help='Strains to remove')
    parser.add_argument('outmatrix', action='store',
                        help='Output matrix file')

    parser.add_argument('--version', action='version',
                         version='%(prog)s '+__version__)

    return parser.parse_args()

if __name__ == "__main__":
    import numpy as np
    import pandas as pd
    options = get_options()

    # Read the input matrix
    m = pd.read_table(options.inmatrix)
    m.set_index(m.columns[0], inplace=True)

    # Read the conversion table
    keep = {x.rstrip() for x in open(options.keep)}

    # Drop the indexes not matching
    m.drop([x for x in m.index
            if x.split()[0] in keep],
           inplace=True)
    # Also, drop the strains that are always NaN
    # as it messes up the following analysis
    remove = {i for i in m.index
              if list(np.isnan(m.ix[i])).count(True) == len(m.columns)}
    m = m.drop(remove)

    # Remove duplicate strains
    # and dummy entries
    remove = {x for x in m.index
              if '_1' in x
              or '_2' in x
              or '_3' in x
              or '_4' in x
              or 'dummy' in x.lower()}
    m = m.drop(remove)

    # Keep duplicated strains from plate 8
    un = set([x.split()[0] for x in m.index])
    keep = []
    for s in sorted(un):
        pos = [(x,i) for x,i in zip(m.index, range(m.shape[0]))
               if x.startswith(s)]
        if len(pos) > 1:
            k = [x[1] for x in pos if x[0].endswith('-P8')]
            if len(k) > 0:
                keep.append(k[0])
            else:
                keep.append(pos[0][1])
        else:
            keep.append(pos[0][1])

    m = pd.DataFrame(m.as_matrix()[keep, :],
                     index=m.index[keep],
                     columns=m.columns)
    
    # Rewrite the strains name to remove the plate information
    m.index = [x.split()[0] for x in m.index]

    # Rewrite the matrix
    m.to_csv(options.outmatrix, sep='\t')
