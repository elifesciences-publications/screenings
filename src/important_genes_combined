#!/usr/bin/env python

# Copyright (C) <2015> EMBL-European Bioinformatics Institute

# This program is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

# Neither the institution name nor the name screenings can
# be used to endorse or promote products derived from this
# software without prior written permission. For written
# permission, please contact <marco@ebi.ac.uk>.

# Products derived from this software may not be called
# screenings nor may screenings appear in their names
# without prior written permission of the developers.
# You should have received a copy of the GNU General Public
# License along with this program. If not, see
# <http://www.gnu.org/licenses/>.

__author__ = "Marco Galardini"
__version__ = "0.0.1"

def get_options():
    import argparse

    # create the top-level parser
    description = "Output the significant genes for each condition"
    parser = argparse.ArgumentParser(description = description,
                                     prog = 'important_genes_combined')
    parser.add_argument('clusters', action='store',
                        help='Conditions clusters')
    parser.add_argument('genes', action='store',
                        help='Important genes')

    parser.add_argument('--merge',
                        default='atleast2',
                        choices=('union',
                                 'atleast2'))
    
    parser.add_argument('--version', action='version',
                         version='%(prog)s '+__version__)

    return parser.parse_args()

if __name__ == "__main__":
    import os
    import pandas as pd
    options = get_options()

    clusters = {}
    for l in open(options.clusters):
        if l.startswith('#'):
            continue
        c, cl = l.rstrip().split('\t')
        clusters[cl] = clusters.get(cl, set())
        clusters[cl].add( c )
        
    genes = {}
    for l in open(options.genes):
        if l.startswith('#'):
            continue
        try:
            cl, c = l.rstrip().split('\t')
            genes[cl] = set(c.split())
        except ValueError:
            continue

    for cl, cs in clusters.items():
        freq = {}
        for c in cs:
            if c not in genes:
                continue
            for gene in genes[c]:
                freq[gene] = freq.get(gene, 0)
                freq[gene] += 1
        if options.merge == 'union':
            print('\t'.join( (cl, ' '.join(freq.keys())) ))
        else:
            print('\t'.join( (cl, ' '.join([x for x,v in freq.items() if v > 1])) ))
