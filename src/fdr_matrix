#!/usr/bin/env python

# Copyright (C) <2015> EMBL-European Bioinformatics Institute

# This program is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

# Neither the institution name nor the name 2015_stm_ec can
# be used to endorse or promote products derived from this
# software without prior written permission. For written
# permission, please contact <marco@ebi.ac.uk>.

# Products derived from this software may not be called
# 2015_stm_ec nor may 2015_stm_ec appear in their names
# without prior written permission of the developers.
# You should have received a copy of the GNU General Public
# License along with this program. If not, see
# <http://www.gnu.org/licenses/>.

__author__ = "Marco Galardini"
__version__ = "0.0.1"

def get_options():
    import argparse

    # create the top-level parser
    description = "Apply column-wise 0.05 FDR correction"
    parser = argparse.ArgumentParser(description = description,
                                     prog = 'fdr_matrix')
    parser.add_argument('inmatrix', action='store',
                        help='Input matrix file')
    parser.add_argument('outmatrix', action='store',
                        help='Output matrix file')

    parser.add_argument('--fdr', action='store',
                        type=float,
                        default=.05,
                        help='FDR threshold [Default: 0.05]')

    parser.add_argument('--version', action='version',
                         version='%(prog)s '+__version__)

    return parser.parse_args()

def mad(data, c=0.6745):
    '''
    Compute the MAD
    
    Equivalent to R's mad function
    '''
    import numpy as np
    
    data = np.ma.masked_array(data.as_matrix(),
               np.isnan(data.as_matrix()))

    return np.ma.median(np.ma.fabs(data - np.ma.median(data))) / c


def median(data):
    import numpy as np

    data = np.ma.masked_array(data.as_matrix(),
                   np.isnan(data.as_matrix()))
    
    return np.ma.median(data)

def get_Zscore(values):
    return (values.as_matrix()-median(values))/mad(values)

def get_sf(values):
    return stats.norm.sf(abs(values))*2

def correct_pvals(values):
    return fdrcorrection0(values,
                        alpha=0.05,
                        )[1]

if __name__ == "__main__":
    import pandas as pd
    import numpy as np
    from scipy import stats
    from statsmodels.sandbox.stats.multicomp import fdrcorrection0
    options = get_options()

    # Read the input matrix
    m = pd.read_table(options.inmatrix)
    m.set_index(m.columns[0], inplace=True)
    
    print('Applying FDR filtering (5%)')
   
    f = {}
    for c in m:
        mz = get_Zscore(m[c].dropna())
        mp = get_sf(mz)
        mf = correct_pvals(mp)
        mf = pd.Series(mf)
        mf.index = m[c].dropna().index
        f[c] = mf
    mf = pd.DataFrame(f)

    v = mf[mf < options.fdr]
    blank = set()
    for gene in mf.index:
        if v.loc[gene].dropna().shape[0] == 0:
            blank.add(gene)

    # Save the FDR p-values
    mf = mf.reindex_axis(sorted(mf.columns), axis=1)
    mf.to_csv(options.outmatrix, sep='\t')

    print('Blank rows: %d (%.1f%%)'%(len(blank),
          len(blank)*100.0/len(m.index)))
