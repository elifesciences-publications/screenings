#!/usr/bin/env python

# Copyright (C) <2015> EMBL-European Bioinformatics Institute

# This program is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

# Neither the institution name nor the name screenings can
# be used to endorse or promote products derived from this
# software without prior written permission. For written
# permission, please contact <marco@ebi.ac.uk>.

# Products derived from this software may not be called
# screenings nor may screenings appear in their names
# without prior written permission of the developers.
# You should have received a copy of the GNU General Public
# License along with this program. If not, see
# <http://www.gnu.org/licenses/>.

__author__ = "Marco Galardini"
__version__ = "0.0.1"

def get_options():
    import argparse

    # create the top-level parser
    description = "Correct an Iris file"
    parser = argparse.ArgumentParser(description = description,
                                     prog = 'fix_iris')
    parser.add_argument('irisfile', action='store',
                        help='Iris data file')
    parser.add_argument('platefile', action='store',
                        help='Plate information file')
    parser.add_argument('odir', action='store',
                        help='Output directory')

    parser.add_argument('--missing', action='store',
                default=8,
                type=int,
                help='Missing areas threshold [Default: 8 contiguous spots]')
    
    parser.add_argument('--circularity1', action='store',
                default=0.5,
                type=float,
                help='Circularity threshold for small colonies [Default: 0.5]')
    parser.add_argument('--circularity2', action='store',
                default=0.3,
                type=float,
                help='Circularity threshold for big colonies [Default: 0.3]')
    parser.add_argument('--size', action='store',
                type=float,
                default=1000,
                help='Size threshold: colonies bigger than this will'+
                ' be considered small [Default: 1000]')
    
    parser.add_argument('--ignore', action='store',
                        dest='ignore',
                        default=None,
                help='File name with positions to ignore (plate row column)')

    parser.add_argument('--variance-size', action='store',
                default=0.9,
                type=float,
                help='Remove replica that contribute at least to this fractio'+
                'n of the total size variance [Default: 0.9]')
    parser.add_argument('--variance-circularity', action='store',
                default=0.95,
                type=float,
                help='Remove replica that contribute at least to this fractio'+
                'n of the total circularity variance [Default: 0.95]')
    
    parser.add_argument('--version', action='version',
                         version='%(prog)s '+__version__)

    return parser.parse_args()

if __name__ == "__main__":
    import os
    import screenings as sc

    options = get_options()

    plate = options.irisfile.split('-')[2].split('_')[0]

    m = sc.parse_iris(options.irisfile,
            options.platefile,
            platenumber=plate)
    header = sc.get_header(options.irisfile) 

    # Identify pinning problems
    remove = {(r, c)
            for r, c in sc.fix_missing(m, size=options.missing)}
    if len(remove) > 0:
        print('\t'.join([options.irisfile, str(len(remove))]))
        m = sc.remove_colonies(m, remove)

    # Fix circularity
    m = sc.fix_circularity(m,
            options.circularity1,
            options.size)
    m = sc.fix_circularity(m,
            options.circularity2,
            options.size,
            above=True)

    # Ignore some colonies
    ignore = set()
    if options.ignore is not None:
        for l in open(options.ignore):
            p, row, column = l.strip().split()
            if p == plate:
                ignore.add( (int(row), int(column)) )
    
        m = sc.remove_colonies(m, ignore)

    # Do the variance jack-knifing
    m = sc.variance_jackknife(m,
            param='colony size',
            var_threshold=options.variance_size)

    # Do it again to remove "budding colonies"
    # and colonies with abnormal shapes
    # that are probably contaminations
    m = sc.variance_jackknife(m,
            param='circularity',
            var_threshold=options.variance_circularity)

    # Rewrite the new Iris file
    f = open(os.path.join(options.odir,
        os.path.basename(options.irisfile)), 'w')
    f.write('\n'.join(header))
    f.write('\n')
    f.write('\t'.join(m.columns))
    f.write('\n')
    # Drop the dataframe index
    m = m.reset_index(drop=True)
    for i in m.T:
        line = []
        for col in m.columns:
            if col == 'row' or col == 'column':
                line.append(int(m.T[i][col]))
            else:
                line.append(m.T[i][col])
        f.write('\t'.join([str(x) for x in line]))
        f.write('\n')
    f.close()
