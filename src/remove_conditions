#!/usr/bin/env python

# Copyright (C) <2015> EMBL-European Bioinformatics Institute

# This program is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

# Neither the institution name nor the name screenings can
# be used to endorse or promote products derived from this
# software without prior written permission. For written
# permission, please contact <marco@ebi.ac.uk>.

# Products derived from this software may not be called
# screenings nor may screenings appear in their names
# without prior written permission of the developers.
# You should have received a copy of the GNU General Public
# License along with this program. If not, see
# <http://www.gnu.org/licenses/>.

__author__ = "Marco Galardini"
__version__ = "0.0.1"

def get_options():
    import argparse

    # create the top-level parser
    description = "Remove conditions from a matrix"
    parser = argparse.ArgumentParser(description = description,
                                     prog = 'remove_strains')
    parser.add_argument('inmatrix', action='store',
                        help='Input matrix file')
    parser.add_argument('remove', action='store',
                        help='Strains to keep')
    parser.add_argument('outmatrix', action='store',
                        help='Output matrix file')

    parser.add_argument('--version', action='version',
                         version='%(prog)s '+__version__)

    return parser.parse_args()

if __name__ == "__main__":
    import numpy as np
    import pandas as pd
    options = get_options()

    # Read the input matrix
    m = pd.read_table(options.inmatrix)
    m.set_index(m.columns[0], inplace=True)

    remove = {x.rstrip() for x in open(options.remove)
              if x.rstrip in m.columns}

    if len(remove) > 0:
        # Drop the indexes not matching
        m.drop(remove,
               axis=1,
               inplace=True)
    # Also, drop the conditions that are always NaN
    # as it messes up the following analysis
    remove = {i for i in m.columns
              if list(np.isnan(m[i])).count(True) == len(m.index)}
    m = m.drop(remove, axis=1)

    # Rewrite the matrix
    m.to_csv(options.outmatrix, sep='\t')
