#!/usr/bin/env python

# Copyright (C) <2015> EMBL-European Bioinformatics Institute

# This program is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

# Neither the institution name nor the name screenings can
# be used to endorse or promote products derived from this
# software without prior written permission. For written
# permission, please contact <marco@ebi.ac.uk>.

# Products derived from this software may not be called
# screenings nor may screenings appear in their names
# without prior written permission of the developers.
# You should have received a copy of the GNU General Public
# License along with this program. If not, see
# <http://www.gnu.org/licenses/>.

__author__ = "Marco Galardini"
__version__ = "0.0.1"

def get_options():
    import argparse

    # create the top-level parser
    description = "Print out genes not passing filters"
    parser = argparse.ArgumentParser(description = description,
                                     prog = 'discard_genes')
    parser.add_argument('inmatrix', action='store',
                        help='Input matrix file')

    parser.add_argument('--filter', action='store',
                        nargs='+',
                        default=['Deletion'],
                        help='Genes to consider [Default: Deletion]')
    
    parser.add_argument('--version', action='version',
                         version='%(prog)s '+__version__)

    return parser.parse_args()

if __name__ == "__main__":
    import sys
    import pandas as pd
    options = get_options()

    # Read the input matrix
    m = pd.read_table(options.inmatrix)
    m.set_index(m.columns[0], inplace=True)
    
    # Output the genes not passing the threshold
    genes = list(m.index)
    for gene in genes:
        if gene.split(' - ')[1].split('-')[0] not in options.filter:
            print(gene)
